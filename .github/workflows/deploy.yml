name: Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Run tests
        run: ./gradlew test

      - name: Create release branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE=$(date +%Y-%m-%d)
          COUNT=$(git branch -r | grep "release-$DATE" | wc -l | xargs)
          NEW_COUNT=$((COUNT + 1))
          BRANCH_NAME="release-$DATE-$NEW_COUNT"
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME

      - name: Build Docker image
        run: |
          docker build -t diasync-server:latest -f deploy/Dockerfile .

      - name: Deploy to server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          DOMAIN: ${{ secrets.DOMAIN }}
          EMAIL: ${{ secrets.EMAIL }}
        run: |
          # Сохраняем SSH-ключ во временный файл
          echo "$SSH_KEY" > ssh_key
          chmod 600 ssh_key

          # Устанавливаем Docker и docker-compose, если их нет
          ssh -i ssh_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST << 'EOF'
            # Устанавливаем Docker, если его нет
            if ! command -v docker >/dev/null 2>&1; then
              apt-get update
              apt-get install -y docker.io
              systemctl start docker
              systemctl enable docker
            fi

            # Устанавливаем docker-compose, если его нет
            if ! command -v docker-compose >/dev/null 2>&1; then
              apt-get update
              apt-get install -y docker-compose
            fi
          EOF

          # Сохраняем и отправляем Docker-образ
          docker save diasync-server:latest | ssh -i ssh_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST docker load

          # Создаём директорию на сервере
          ssh -i ssh_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST "mkdir -p ~/diasync-deploy"

          # Отправляем файлы из папки deploy/
          scp -i ssh_key -P $SSH_PORT -o StrictHostKeyChecking=no deploy/Dockerfile deploy/Caddyfile deploy/docker-compose.yml $SSH_USER@$SSH_HOST:~/diasync-deploy/

          # Запускаем сервисы
          ssh -i ssh_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST << 'EOF'
            cd ~/diasync-deploy
            docker-compose down
            docker-compose up -d
          EOF

          # Удаляем временный ключ
          rm ssh_key
